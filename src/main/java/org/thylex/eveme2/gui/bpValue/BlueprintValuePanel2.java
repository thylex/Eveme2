/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package org.thylex.eveme2.gui.bpValue;

import java.awt.BorderLayout;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JScrollPane;
import javax.swing.JTree;
import javax.swing.tree.DefaultMutableTreeNode;
import org.thylex.eveme2.app.App;
import org.thylex.eveme2.io.entities.sde.InvMarketGroups;
import org.thylex.eveme2.io.entities.sde.InvTypes;

/**
 *
 * @author thyle
 */
public class BlueprintValuePanel2 extends javax.swing.JPanel {

    private App app;
    private bpValSplit parent;
    private DefaultMutableTreeNode top = null;
    private JScrollPane treeView = null;
    private static final Logger log = Logger.getLogger(BlueprintValuePanel2.class.getName());
    /**
     * Creates new form BPValue2
     */
    public BlueprintValuePanel2(App appl, bpValSplit parentPanel) {
        app = appl;
        parent = parentPanel;
        
        initComponents();
        this.createLayout();
    }
    
    private void createLayout() {
        this.setLayout(new BorderLayout());
        
        JTree tree = new JTree(createBPTree());
        treeView = new JScrollPane(tree);
        this.add(treeView, BorderLayout.CENTER);
    }
    
    private class TreeNode {
        private String nodeName = "";
        private InvTypes nodeType = null;
        
        public TreeNode(InvTypes data) {
            nodeName = data.getTypeName();
            nodeType = data;
        }
        
        @Override
        public String toString() {
            return nodeName;
        }
        
        public InvTypes getInvTypes() {
            return nodeType;
        }
    }

    private DefaultMutableTreeNode createBPTree() {
        InvMarketGroups topGroup = (InvMarketGroups) app.getSdeWorker().findMarketGroupsByName("Blueprints & Reactions");
        DefaultMutableTreeNode topNode = addTreeBranch(topGroup);
        return topNode;
    }
    
    private DefaultMutableTreeNode addTreeBranch(InvMarketGroups marketGroup) {
        DefaultMutableTreeNode tempNode = new DefaultMutableTreeNode(marketGroup.getMarketGroupName());
        List<InvMarketGroups> temp = app.getSdeWorker().findMarketGroupsByParentID(marketGroup.getMarketGroupID());
        log.log(Level.INFO, "Subitems found: ".concat(new Integer(temp.size()).toString()));
        log.log(Level.INFO, "Market ID: ".concat(marketGroup.getMarketGroupID().toString()));
        for(InvMarketGroups item : temp) {
            if (item.getHasTypes() == 0) {
                //tempNode = new DefaultMutableTreeNode(item.getMarketGroupName());
                log.log(Level.INFO, item.getMarketGroupName().concat(" has no Types"));
                log.log(Level.INFO, "Adding branch for: ".concat(item.getMarketGroupName()));
                tempNode.add(addTreeBranch(item));
            } else {
                log.log(Level.INFO, item.getMarketGroupName().concat(" has Types"));
                List<InvTypes> typesList = app.getSdeWorker().findTypeByMarketGroupID(item.getMarketGroupID());
                DefaultMutableTreeNode subNode = new DefaultMutableTreeNode(item.getMarketGroupName());
                for (InvTypes typesItem : typesList) {
                    log.log(Level.INFO, "Adding leaf for: ".concat(typesItem.getTypeName()));
                    TreeNode leaf = new TreeNode(typesItem);
                    subNode.add(new DefaultMutableTreeNode(leaf));
                }
                tempNode.add(subNode);
            }
        }
        return tempNode;
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
